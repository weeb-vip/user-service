package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/weeb-vip/user-service/graph/generated"
	"github.com/weeb-vip/user-service/graph/model"
	"github.com/weeb-vip/user-service/internal/resolvers"
)

// CreatUser is the resolver for the CreatUser field.
func (r *mutationResolver) CreatUser(ctx context.Context, input model.CreateUserInput) (*model.User, error) {
	return resolvers.CreateUser(ctx, r.UserService, &input)
}

// UpdateUserDetails is the resolver for the UpdateUserDetails field.
func (r *mutationResolver) UpdateUserDetails(ctx context.Context, input model.UpdateUserInput) (*model.User, error) {
	return resolvers.UpdateUser(ctx, r.UserService, &input)
}

// UploadProfileImage is the resolver for the UploadProfileImage field.
func (r *mutationResolver) UploadProfileImage(ctx context.Context, image graphql.Upload) (*model.User, error) {
	return resolvers.UploadProfileImage(ctx, r.UserService, r.ImageService, image)
}

// UserDetails is the resolver for the UserDetails field.
func (r *queryResolver) UserDetails(ctx context.Context) (*model.User, error) {
	return resolvers.GetUser(ctx, r.UserService)
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
